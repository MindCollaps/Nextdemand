{{define "title"}}Next Demand{{end}}
{{define "metaDescription"}}Next Demand, your demand of your own Cloud can be provided right HERE!{{end}}
{{define "content"}}
    {{template "topdoc"}}
    <div id="app" class="h-100 w-100 d-flex flex-column justify-content-center">
        <div v-if="retarded()" class="absolut"><img :style="retardedSize()" src="/assets/pepemeimei.jpg"></div>
        <div v-if="!waiting && !done && !failed && !error && !rateLimit" class="d-flex justify-content-center align-items-center h-100">
            <div class="d-flex justify-content-center flex-column w-100 h-100">
                <div class="d-flex flex-column ">
                    <div class="d-flex justify-content-center align-items-center mb-5">
                        <img class="me-2 theimage" style="width: 10vh" src="/favicon.ico"
                             alt="">
                        <div class="text-white mb-0 me-4 fs-2 welcome">Welcome to</div>
                        <div class="aso me-3 position-relative text-white fs-1">Next Demand</div>
                        <div class="ist me-3 position-relative text-white fs-5">Stupid</div>
                        <div class="das position-relative text-white fs-5">Short lived</div>
                    </div>
                    <div class="d-flex justify-content-center align-items-center mt-5 mb-3">
                        <h5>Spawn your own Cloud instance NOW!</h5>
                    </div>
                    <div class="d-flex justify-content-center align-items-center mt-5">
                        <div class="obj" @click="press()"></div>
                    </div>
                </div>
            </div>
        </div>
        <div v-if="rateLimit" class="d-flex flex-column justify-content-center align-items-center h-100">
                <h3>Rate Limit Exceeded</h3>
                <p>Sorry, you can only spawn one instance every 5 minutes.</p>
        </div>
        <div v-if="failed" class="d-flex flex-column justify-content-center align-items-center h-100">
            <h3>Deployment failed</h3>
            <p>There was an error communicating with the deployment server. Try again later</p>
        </div>
        <div v-if="waiting" class="d-flex flex-column justify-content-center align-items-center h-100">
            <div class="spinner-grow" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <div class="mt-2">
                <p>${waitingText}</p>
            </div>
        </div>
        <div v-if="error" class="d-flex flex-column justify-content-center align-items-center h-100">
            <h3>Error while deploying</h3>
            <p>There was an error in the deployment process</p>
        </div>
        <div v-if="done" class="d-flex flex-column justify-content-center align-items-center h-100">
            <div>
                <h3>Your instance is ready!</h3>
                <div class="bg-body-secondary rounded-3 shadow p-4">
                    <p>Username: admin</p>
                    <p>Password: ${pass}</p>
                </div>
                <button class="btn btn-success" @click="goThere()">Go There</button>
            </div>
        </div>
        {{template "footer"}}
    </div>

    <style>
        /*https://codepen.io/homes107/pen/ogNpXy*/
        .obj {
            width: 100px;
            height: 100px;
            margin-left: -50px;
            margin-top: -50px;
            left: 50%;
            top: 50%;
            position: absolute;
            background: #e55050;
            border-radius: 100px;
            box-shadow: inset -2px 2px 2px 0px #ef9393, inset 2px -2px 2px 0px rgba(113, 17, 17, 0.3), inset 0px 0px 40px 15px #de2424, 1px 1px 0 0 #d32020, 2px 2px 0 0 #c61e1e, 3px 3px 0 0 #b81c1c, 4px 4px 0 0 #ab1a1a, 5px 5px 0 0 #9e1818, 6px 6px 0 0 #901616, 7px 7px 0 0 #881414, 8px 8px 0 0 #831414, 9px 9px 0 0 #7f1313, 10px 10px 0 0 #7a1212, 11px 11px 0 0 #761212, 12px 12px 0 0 #711111, 13px 13px 0 0 #711111, 14px 14px 0 0 #711111, 15px 15px 0 0 #711111, 16px 16px 0 0 #711111, 17px 17px 0 0 #711111, 18px 18px 0 0 #711111, 19px 19px 0 0 #711111, 20px 20px 0 0 #711111, 19px 21px 1pc 1px rgba(113, 17, 17, 0.1), 18px 22px 1px 1px rgba(113, 17, 17, 0.1), 17px 23px 1px 1px rgba(113, 17, 17, 0.1), 16px 24px 1px 1px rgba(113, 17, 17, 0.1), 15px 25px 1px 1px rgba(113, 17, 17, 0.1), 14px 26px 2px 1px rgba(113, 17, 17, 0.1), 13px 27px 3px 1px rgba(113, 17, 17, 0.1), 12px 28px 4px 1px rgba(113, 17, 17, 0.1), 11px 29px 5px 1px rgba(113, 17, 17, 0.1), 10px 30px 6px 1px rgba(113, 17, 17, 0.1), 9px 31px 7px 1px rgba(113, 17, 17, 0.1), 20px 20px 4px 1px #711111;
            transition: all 0.3s ease;
        }

        .obj:active {
            margin-left: -31px;
            margin-top: -31px;
            background: #e86666;
            box-shadow: inset -2px 2px 2px 0px #ef9393, inset 2px -2px 2px 0px rgba(113, 17, 17, 0.3), inset 0px 0px 40px 15px #de2424, 1px 1px 0 0 #711111, 1px 1px 0 0 #711111, 1px 1px 0 0 #711111, 1px 1px 0 0 #711111, 1px 1px 0 0 #711111, 1px 1px 0 0 #711111, 1px 1px 0 0 #711111, 1px 1px 0 0 #711111, 1px 1px 0 0 #711111, 1px 1px 0 0 #711111, 1px 1px 0 0 #711111, 1px 1px 0 0 #711111, 1px 1px 0 0 #711111, 1px 1px 0 0 #711111, 1px 1px 0 0 #711111, 1px 1px 0 0 #711111, 1px 1px 0 0 #711111, 1px 1px 0 0 #711111, 1px 1px 0 0 #711111, 1px 1px 0 0 #711111, 1px 1px 2px 1px rgba(113, 17, 17, 0.5), 0px 0px 4px 1px #711111;
        }
    </style>

    <script>
        var app = Vue.createApp({
            delimiters: ['${', '}'],
            data: () => ({
                pressed: 0,
                waiting: false,
                failed: false,
                instanceId: "",
                done: false,
                pass: "",
                error: false,
                rateLimit: false,
                waitingText: "Waiting for instance to spawn...",
                waitingTexts: [
                    "Contemplating the meaning of life while Kubernetes does its thing...",
                    "Sending positive vibes to Kubernetes so it works faster...",
                    "Hoping Kubernetes is having a good day and decides to spin up our instance...",
                    "Chatting with Kubernetes about its weekend plans...",
                    "Playing some elevator music while Kubernetes gets its act together...",
                    "Kubernetes, please don't take this personally, but can you hurry up already?",
                    "Kubernetes, you're doing great! Just a bit faster would be nice...",
                    "Trying to bribe Kubernetes with virtual cookies to speed things along...",
                    "Sending virtual hugs to Kubernetes to encourage faster deployment...",
                    "Counting the minutes until Kubernetes finally finishes its coffee break...",

                ]
            }),
            methods: {
                async press() {
                    this.pressed++
                    if (this.waiting || this.failed) return;
                    let response = await fetch('/spawn', {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                    }).then((res) => {
                        return res;
                    }).catch((err) => {
                        return errx;
                    })

                    if (response.status === 200) {
                        this.waiting = true;
                        this.failed = false;
                        this.rateLimit = false;
                        this.error = false;
                        this.done = false;
                        var data = await response.json();
                        this.instanceId = data.uid;
                        this.pass = data.pass
                        this.waitingFunc()
                        this.checkerTask()
                    } else if (response.status === 429) {
                        this.rateLimit = true;
                        this.waiting = false;
                        this.failed = false;
                        this.error = false;
                        this.done = false;
                    } else {
                        this.failed = true;
                        this.waiting = false;
                        this.rateLimit = false;
                        this.error = false;
                        this.done = false;
                    }
                },
                retarded() {
                    return this.pressed > 10;
                },
                retardedSize() {
                    return {
                        width: Math.pow(this.pressed, 2) + "px",
                        height: Math.pow(this.pressed, 2) + "px"
                    };
                },
                checkerTask() {
                    setTimeout(async () => {
                        let url = "https://" + this.instanceId + "." + window.location.hostname;
                        console.log("Checking: " + url)

                        let response = await fetch(url, {
                            method: 'GET',
                            headers: {
                                'Content-Type': 'text/html'
                            },
                            mode: "no-cors"
                        }).then((res) => {
                            if (res.status === 200) {
                                return true;
                            } else if (res.status === 0) {
                                this.done = true;
                                this.waiting = false;
                                this.failed = false;
                                this.error = false;
                                this.rateLimit = false;
                                return true;
                            }
                        }).catch((err) => {
                            //This is true, because we will get a certificate error if the is up instead of 404
                            this.failed = false;
                            this.waiting = true;
                            this.rateLimit = false;
                            this.error = false;
                            this.done = false;
                            return false;
                        });

                        if (!response) {
                            this.checkerTask();
                        } else {
                            this.done = true;
                            this.waiting = false;
                            this.failed = false;
                            this.error = false;
                            this.rateLimit = false;
                        }
                    }, 2000);
                },
                goThere() {
                    window.location = "https://" + this.instanceId + "." + window.location.hostname;
                },
                waitingFunc() {
                    //timeout
                    setTimeout(() => {
                        this.waitingText = this.waitingTexts[Math.floor(Math.random() * this.waitingTexts.length - 1)];
                        this.waitingFunc();
                    }, 8000);
                }
            }
        }).mount('#app')
        setTimeout(function () {
            anime({
                targets: '.aso',
                scaleX: [
                    {value: [1, 1.15], duration: 2000},
                    {value: [1.15, 1], duration: 2000},
                ],
                scaleY: [
                    {value: [1, 1.15], duration: 2000},
                    {value: [1.15, 1], duration: 2000},
                ],
                easing: 'easeInOutQuad',
                loop: true
            })
        }, 4000)


        var tl = anime.timeline();

        tl.add({
            targets: '.welcome',
            opacity: [
                {value: 0, duration: 0},
                {value: 1, duration: 1000},
            ],
            translateX: [
                {value: 20, duration: 0},
                {value: 0, duration: 1000},
            ],
            translateY: [
                {value: 40, duration: 0},
                {value: 0, duration: 1000},
            ],
            rotation: [
                {value: -43, duration: 1000},
                {value: 30, duration: 1000},
            ],
            easing: 'easeInOutQuad',
            loop: false
        }, 100)

        tl.add({
            targets: '.aso',
            opacity: [
                {value: 0, duration: 0},
                {value: 1, duration: 100},
            ],
            translateX: [
                {value: 250, duration: 0},
                {value: 0, duration: 1000},
            ],
            translateY: [
                {value: 40, duration: 0},
                {value: 0, duration: 1000},
            ],
            scaleX: [
                {value: [1.75, 1], duration: 200},
            ],
            scaleY: [
                {value: [1.75, 1], duration: 200},
            ],
            easing: 'easeOutElastic(.1, 1)',
            loop: false
        }, 1100);

        tl.add({
            targets: '.ist',
            opacity: [
                {value: 0, duration: 0},
                {value: 1, duration: 100},
            ],
            translateX: [
                {value: -250, duration: 0},
                {value: 0, duration: 1000},
            ],
            translateY: [
                {value: 40, duration: 0},
                {value: -20, duration: 1000},
            ],
            scaleX: [
                {value: [1.75, 1], duration: 200},
            ],
            scaleY: [
                {value: [1.75, 1], duration: 200},
            ],
            rotate: [
                {value: 412, duration: 0},
                {value: -29, duration: 1000},
            ],
            easing: 'easeOutElastic(.2, .5)',
            loop: false
        }, 1400)

        tl.add({
            targets: '.das',
            opacity: [
                {value: 0, duration: 0},
                {value: 1, duration: 100},
            ],
            translateX: [
                {value: -250, duration: 0},
                {value: 0, duration: 1000},
            ],
            translateY: [
                {value: 40, duration: 0},
                {value: -6, duration: 1000},
            ],
            scaleX: [
                {value: [1.75, 1], duration: 200},
            ],
            scaleY: [
                {value: [1.75, 1], duration: 200},
            ],
            rotate: [
                {value: -423, duration: 0},
                {value: 32, duration: 1000},
            ],
            easing: 'easeOutElastic(.2, .5)',
            loop: false
        }, 1500)

        tl.add({
            targets: '.thebtn',
            opacity: [
                {value: 0, duration: 0},
                {value: 1, duration: 1000},
            ],
            scaleX: [
                {value: [0, 1], duration: 200},
            ],
            scaleY: [
                {value: [0, 1], duration: 200},
            ],
            translateY: [
                {value: 40, duration: 0},
                {value: 0, duration: 1000},
            ],
            easing: 'easeOutElastic(.2, .5)',
            loop: false
        }, 2700)

        tl.add({
            targets: '.theimage',
            opacity: [
                {value: 0, duration: 0},
                {value: 1, duration: 1000},
            ],
            scaleX: [
                {value: [0, 1], duration: 200},
            ],
            scaleY: [
                {value: [0, 1], duration: 200},
            ],
            translateY: [
                {value: -40, duration: 0},
                {value: 0, duration: 500},
            ],
        }, 2700)
    </script>
    {{template "botdoc"}}
{{end}}